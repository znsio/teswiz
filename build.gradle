import java.text.SimpleDateFormat

buildscript {
    ext {
        gradleVersion = "8.5"
        assertJVersion = "3.25.2"
        atdVersion = "revertDeviceFarmUrl-SNAPSHOT" // revertDeviceFarmUrl branch (70c9e51052)
        applitoolsAppiumVersion = "5.66.6"
        commonsLang3Version = "3.14.0"
        commonsRngSimpleVersion = "1.5"
        unirestVersion = "3.14.5"
        jadbVersion = "1.2.1"
        junitVersion = "5.10.1"
        fasterxmlJacksonVersion = "2.16.1"
        jodaTimeVersion = "2.12.6"
        masterThoughtVersion = "5.7.8"
        browserStackLocalVersion = "1.1.0"
        jetbrainsAnnotationsVersion = "24.1.0"
        aspectJVersion = "1.9.20.1"
        webDriverManager = '5.6.3'
        specmaticVersion = '1.0.4'
    }
}

plugins {
    id "org.sonarqube" version "4.4.1.3373"
    id "java"
    id "idea"
    id "com.github.johnrengelman.shadow" version '8.1.1'
    id "maven-publish"
    id "io.freefair.aspectj.post-compile-weaving" version "8.4"
}

group = 'com.github.znsio'
version '0.0.91'

repositories {
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

compileJava {
    options.encoding = "UTF-8"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation fileTree(dir: "$project.projectDir/libs", include: ['*.jar'])
    implementation files(layout.buildDirectory.files("/classes/main"))
    implementation files(layout.buildDirectory.files("/classes/test"))
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$project.fasterxmlJacksonVersion"
    implementation "com.konghq:unirest-java:$project.unirestVersion"
    implementation "org.assertj:assertj-core:$project.assertJVersion"
    implementation ("com.github.AppiumTestDistribution:AppiumTestDistribution:$project.atdVersion") {
        exclude group: 'io.appium', module: 'java-client'
    }
    implementation "org.apache.commons:commons-lang3:$project.commonsLang3Version"
    implementation "org.apache.commons:commons-rng-simple:$project.commonsRngSimpleVersion"
    implementation "com.github.vidstige:jadb:$project.jadbVersion"
    implementation "org.jetbrains:annotations:$project.jetbrainsAnnotationsVersion"
    implementation "org.junit.jupiter:junit-jupiter:$project.junitVersion"
    implementation "joda-time:joda-time:$project.jodaTimeVersion"
    implementation "com.browserstack:browserstack-local-java:$project.browserStackLocalVersion"
    implementation ("com.applitools:eyes-appium-java5:$project.applitoolsAppiumVersion") {
//        exclude group: 'io.appium', module: 'java-client'
    }
    implementation "net.masterthought:cucumber-reporting:$masterThoughtVersion"
    implementation "org.aspectj:aspectjrt:$project.aspectJVersion"
    implementation "in.specmatic:specmatic-core:${project.specmaticVersion}"
    implementation "io.github.bonigarcia:webdrivermanager:$project.webDriverManager"
}

shadowJar {
    archiveBaseName.set("$project.name")
    archiveClassifier.set('')
    archiveVersion.set("$project.version")
    zip64 true
    manifest {
        attributes "Multi-Release": true
        attributes "Main-Class": "com.znsio.e2e.runner.Runner"
    }
    exclude "**/Log4j2Plugins.dat"
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives shadowJar
}

wrapper {
    gradleVersion = project.gradleVersion // version from gradle.properties
}

publishing {
    publications {
        testing(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

tasks.register('install') { dependsOn publishToMavenLocal }

static def getCurrentDatestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("MM-dd-yyyy")
    return df.format(today)
}

static def getCurrentTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("HH-mm-ss")
    return df.format(today)
}

tasks.register('run', JavaExec) {
    doFirst {
        def logDirectory = "target/" + getCurrentDatestamp() + "/" + getCurrentTimestamp()
        println "Using LOG_DIR: $logDirectory"
        System.setProperty "LOG_DIR", "$logDirectory"
        environment "APPLITOOLS_LOG_DIR", "$logDirectory/applitools_logs"

        def configFile = System.getenv("CONFIG")
        if (null == configFile || !file(configFile).exists()) {
            println("CONFIG file not provided, or does not exist")
            println("Run the test by providing the CONFIG file not provided, or does not exist")
            assert file(configFile).exists()
        }

//      You can also specify which config file to use based on the value of RUN_IN_CI as shown below
//
//        def isRunInCI = Boolean.parseBoolean(System.getenv("RUN_IN_CI"))
//        println "isRunningInCI: $isRunInCI"
//        def configFile = isRunInCI
//                ? "./configs/theapp/theapp_pcloudy_config.properties"
//                : "./configs/theapp/theapp_local_android_config.properties"
//        configFile = System.getenv("CONFIG") ? System.getenv("CONFIG") : configFile

        systemProperties = System.properties as Map<String, ?>
        def runnerArgs = [
                "${configFile}",
                "com/znsio/teswiz/steps",
                "./src/test/resources/com/znsio/teswiz/features"
        ]
        args = runnerArgs

        println("Debug mode: " + System.getProperty('debug', 'false'))
        // attach debugger
        // example: ./gradlew run -Ddebug=true
        if (System.getProperty('debug', 'false') == 'true') {
            println("In debug mode")
            jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,' +
                    'address=*:5005'
        }
    }
    mainClass = "com.znsio.teswiz.runner.Runner"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
}

test {
    useJUnitPlatform()

    outputs.upToDateWhen { false }

    testLogging {
        events "started", "passed", "skipped", "failed"
        // show standard out and standard error of the test JVM(s) on the console
        showStandardStreams = true
        // show full exception trace
        exceptionFormat = 'full'
        showStackTraces = true
        showCauses = true
        showExceptions = true
    }

    // attach debugger
    if (System.getProperty('debug', 'false') == 'true') {
        jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=n,address=192.168.29.248:9009,suspend=y'
    }
    reports {
        html.required.set(true)
        junitXml.required.set(true)
        html.outputLocation.set(file("$buildDir/unit-test-results"))
        junitXml.outputLocation.set(file("$buildDir/unit-test-results"))
    }
}

shadowJar.finalizedBy sourcesJar
