import java.text.SimpleDateFormat
import org.codehaus.groovy.runtime.GStringImpl

buildscript {
    ext {
    }
}

plugins {
    id "org.sonarqube" version "6.2.0.5505"
    id "java"
    id "idea"
    id "com.github.johnrengelman.shadow" version '8.1.1'
    id "maven-publish"
    id "io.freefair.aspectj.post-compile-weaving" version "8.11"
}

group = "com.github.znsio"
version = "1.0.12"
def atdVersion = "14.0.4" // ATD main branch
def applitoolsAppiumVersion = "5.75.2"
def applitoolsImagesVersion = "5.77.1"
def aspectJVersion = "1.9.24"
def assertJVersion = "3.27.3"
def browserStackLocalVersion = "1.1.5"
def commonsLang3Version = "3.17.0"
def commonsRngSimpleVersion = "1.6"
def fasterxmlJacksonVersion = "2.19.1"
def gradleVersion = "8.14.2"
def jadbVersion = "1.2.1"
def jetbrainsAnnotationsVersion = "26.0.2"
def jodaTimeVersion = "2.14.0"
def jsonDiffVersion = "0.4.16"
def junitVersion = "5.13.1"
def masterThoughtVersion = "5.8.2"
def pdfBoxVersion = "3.0.5"
def seleniumVersion = "4.33.0"
def snakeyamlVersion = "2.4"
def specmaticVersion = "1.3.39"
def unirestVersion = "3.14.5"
def webDriverManagerVersion = "6.1.0"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
    maven {
        url = 'https://jitpack.io'
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Define the libs directory in the project root
ext.libsDir = file("$projectDir/libs")

def isJarInLocalCache(String group, String artifact, String version, String fileNameSuffix) {
    def m2Path = new File(System.getProperty("user.home"),
            ".m2/repository/${group.replace('.', '/')}/${artifact}/${version}/${artifact}-${version}${fileNameSuffix}.jar")
    def gradlePath = new File(System.getProperty("user.home"),
            ".gradle/caches/modules-2/files-2.1/${group}/${artifact}/${version}")

    if (m2Path.exists()) {
        println "\t✔ Found in local .m2 cache: $m2Path"
        return m2Path
    }

    if (gradlePath.exists()) {
        def cachedJar = gradlePath.listFiles()?.find { it.name.endsWith(".jar") }
        if (cachedJar) {
            println "\t✔ Found in .gradle cache: ${cachedJar}"
            return cachedJar
        }
    }

    return null
}

def downloadDependency(String name, String type, Map<String, String> params) {
    if (!libsDir.exists()) {
        libsDir.mkdirs()
    }

    println "Processing dependency: ${name} from ${type}"
    def jarFile = new File(libsDir, "${name}-${params.version}.jar")

    if (params.forceUpdate?.toString() == "true") {
        if (jarFile.exists()) {
            println "\t🧹 Force update enabled. Deleting existing jar: $jarFile"
            jarFile.delete()
        }
    } else if (jarFile.exists()) {
        println "\t✔ Dependency $name already exists at: $jarFile. Skipping download."
        return jarFile
    }

    def cachedJar = isJarInLocalCache(params.group, params.artifact, params.version, params.fileNameSuffix ?: "")
    if (cachedJar != null) {
        jarFile.bytes = cachedJar.bytes
        println "\t✅ Copied from local cache to: $jarFile"
        return jarFile
    }

    def jarUrl
    if (type == "github") {
        println "\tFetching latest GitHub release information for ${params.repoUrl}..."
        def jsonResponse = new URL(params.repoUrl).text
        def jsonSlurper = new groovy.json.JsonSlurper()
        def releaseInfo = jsonSlurper.parseText(jsonResponse)

        def assets = releaseInfo.assets
        if (!(assets instanceof List)) {
            throw new GradleException("Assets field is not a list: $assets")
        }

        def jarAsset = assets.find { it.name.matches(/${name}-\d+\.\d+\.\d+\.jar/) }
        if (!jarAsset) {
            throw new GradleException("No ${name} JAR file found in the latest GitHub release.")
        }
        jarUrl = jarAsset.browser_download_url
    } else if (type == "jitpack") {
        jarUrl = "https://jitpack.io/${params.group.replace('.', '/')}/${params.artifact}/${params.version}/${params.artifact}-${params.version}${params.fileNameSuffix}.jar"
    } else {
        throw new GradleException("Unknown type: $type")
    }

    println "\t⬇ Downloading ${name} JAR from ${jarUrl}"
    def downloadCommand = System.getProperty("os.name").toLowerCase().contains("win") ?
            ["cmd", "/c", "curl", "-L", "-o", jarFile.absolutePath, jarUrl] :
            ["wget", "-O", jarFile.absolutePath, jarUrl]

    downloadCommand = downloadCommand.collect { it.toString() }

    println "\t📥 Downloading using command: ${downloadCommand}"

    def process = new ProcessBuilder(downloadCommand).redirectErrorStream(true).start()
    process.inputStream.eachLine { println it }
    process.waitFor()

    if (process.exitValue() != 0) {
        throw new GradleException("❌ Failed to download ${name} JAR.")
    }

    println "✅ ${name} JAR downloaded to $jarFile"
    return jarFile
}


// Define a custom task to download dependencies
tasks.register('downloadDependencies') {
    doLast {
        println "Downloading required dependencies..."
        def dependencies = [
//                [
//                        name  : "teswiz",
//                        type  : "github",
//                        params: [
//                                repoUrl: "https://api.github.com/repos/znsio/teswiz/releases/latest",
//                                version: "$teswizVersion"
//                        ]
//                ],
                [
                        name  : "AppiumTestDistribution",
                        type  : "jitpack",
                        params: [
                                group   : "com.github.AppiumTestDistribution",
                                artifact: "AppiumTestDistribution",
                                version : "$atdVersion",
                                fileNameSuffix: "-jar-with-dependencies",
                                forceUpdate: true
                        ]
                ],
                [
                        name  : "jadb",
                        type  : "jitpack",
                        params: [
                                group   : "com.github.vidstige",
                                artifact: "jadb",
                                version : "$jadbVersion",
                                fileNameSuffix: "",
                                forceUpdate: false
                        ]
                ]
        ]

        println "\n---------------------------------------------"

        dependencies.each { dep ->
            println "Processing dependency: ${dep.name}"
            downloadDependency(dep.name, dep.type, dep.params)
            println "\n---------------------------------------------"

        }
    }
}

// Ensure dependencies are downloaded before compiling
tasks.compileJava {
    dependsOn downloadDependencies
    options.encoding = "UTF-8"
}

dependencies {
    implementation fileTree(dir: "$project.projectDir/libs", include: ['*.jar'])
    implementation files(layout.buildDirectory.files("/classes/main"))
    implementation files(layout.buildDirectory.files("/classes/test"))
    implementation("com.github.AppiumTestDistribution:AppiumTestDistribution:$atdVersion") {
        exclude group: 'io.appium', module: 'java-client'
    }
    implementation "com.github.vidstige:jadb:$jadbVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$fasterxmlJacksonVersion"
    implementation "com.konghq:unirest-java:$unirestVersion"
    implementation "org.assertj:assertj-core:$assertJVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLang3Version"
    implementation "org.apache.commons:commons-rng-simple:$commonsRngSimpleVersion"
    implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation "joda-time:joda-time:$jodaTimeVersion"
    implementation "com.browserstack:browserstack-local-java:$browserStackLocalVersion"
    implementation "com.applitools:eyes-images-java5:$applitoolsImagesVersion"
    implementation("com.applitools:eyes-appium-java5:$applitoolsAppiumVersion") {
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-java'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-api'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-support'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-remote-driver'
//        exclude group: 'io.appium', module: 'java-client'
    }
    implementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    implementation "net.masterthought:cucumber-reporting:$masterThoughtVersion"
    implementation "org.aspectj:aspectjrt:$aspectJVersion"
    implementation "in.specmatic:specmatic-core:$specmaticVersion"
    implementation "io.github.bonigarcia:webdrivermanager:$webDriverManagerVersion"
    implementation "org.yaml:snakeyaml:$snakeyamlVersion"
    implementation "com.flipkart.zjsonpatch:zjsonpatch:$jsonDiffVersion"
    implementation "org.apache.pdfbox:pdfbox:$pdfBoxVersion"
}

shadowJar {
    archiveBaseName.set("$project.name")
    archiveClassifier.set('')
    archiveVersion.set("$project.version")
    zip64 = true
    manifest {
        attributes "Multi-Release": true
        attributes "Main-Class": "com.znsio.e2e.runner.Runner"
    }
    exclude "**/Log4j2Plugins.dat"
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives shadowJar
}

wrapper {
    gradleVersion = "$gradleVersion" // version from gradle.properties
}

publishing {
    publications {
        testing(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

tasks.register('install') { dependsOn publishToMavenLocal }

static def getCurrentDatestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("MM-dd-yyyy")
    return df.format(today)
}

static def getMonth() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("MMM-yyyy")
    return df.format(today)
}

static def getCurrentTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("HH-mm-ss")
    return df.format(today)
}

project.ext.logDir = "./target/" + getMonth() + "/" + getCurrentDatestamp() + "/" + getCurrentTimestamp()

def copyRpPropertiesIfMissing() {
    def rpFile = file('src/test/resources/reportportal.properties')
    def rpTemplateFile = file('src/test/resources/reportportal.properties.template')

    if (!rpFile.exists() && rpTemplateFile.exists()) {
        println "Copying $rpTemplateFile to $rpFile"
        rpFile.text = rpTemplateFile.text
    } else if (!rpTemplateFile.exists()) {
        println "$rpTemplateFile does not exist. Please create it."
    } else {
        println "$rpFile already exists."
    }
    System.setProperty("reportportal.properties.file", rpFile.absolutePath)
}

tasks.register('copyRpPropertiesIfMissing') {
    doLast {
        copyRpPropertiesIfMissing()
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':build') || taskGraph.hasTask(':run')) {
        copyRpPropertiesIfMissing()
    }
}

tasks.register('run', JavaExec) {
    doFirst {
        println "Using LOG_DIR: ${project.logDir}"
        System.setProperty "LOG_DIR", "${project.logDir}"
        environment "APPLITOOLS_LOG_DIR", "${project.logDir}/applitools_logs"
        environment "APPLITOOLS_API_KEY", System.getenv("TESWIZ_APPLITOOLS_API_KEY")

        def hostname = InetAddress.getLocalHost().getHostName()
        println "Hostname: $hostname"
        def ipAddress = InetAddress.getAllByName(hostname)
                .find { it.hostAddress.startsWith("192") || it.hostAddress.startsWith("172") || it.hostAddress.startsWith("10") }
                ?.hostAddress
        println "IP Address of this machine: $ipAddress"
        if (null == ipAddress) {
            println "Unable to get local IP address. NOT updating BASE_URL and REMOTE_WEBDRIVER_GRID_HOST_NAME"
        } else {
//            println "Updating BASE_URL ('http://$ipAddress:3000') and REMOTE_WEBDRIVER_GRID_HOST_NAME ('$ipAddress')"
//            environment "BASE_URL", "http://$ipAddress:3000"
            environment "REMOTE_WEBDRIVER_GRID_HOST_NAME", "$ipAddress"
        }

        def configFile = System.getenv("CONFIG")
        if (null == configFile || !file(configFile).exists()) {
            println("CONFIG file not provided, or does not exist")
            println("Run the test by providing the CONFIG file not provided, or does not exist")
            assert file(configFile).exists()
        }

//      You can also specify which config file to use based on the value of RUN_IN_CI as shown below
//
//        def isRunInCI = Boolean.parseBoolean(System.getenv("RUN_IN_CI"))
//        println "isRunningInCI: $isRunInCI"
//        def configFile = isRunInCI
//                ? "./configs/theapp/theapp_pcloudy_config.properties"
//                : "./configs/theapp/theapp_local_android_config.properties"
//        configFile = System.getenv("CONFIG") ? System.getenv("CONFIG") : configFile

        systemProperties = System.properties as Map<String, ?>
        def runnerArgs = [
                "${configFile}",
                "com/znsio/teswiz/steps",
                "./src/test/resources/com/znsio/teswiz/features"
        ]
        args = runnerArgs

        println("Debug mode: " + System.getProperty('debug', 'false'))
        // attach debugger
        // example: ./gradlew run -Ddebug=true
        if (System.getProperty('debug', 'false') == 'true') {
            println("In debug mode")
            jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,' +
                    'address=*:5005'
        }
    }
    mainClass = "com.znsio.teswiz.runner.Runner"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
}

tasks.named('test', Test) {
    useJUnitPlatform()

    outputs.upToDateWhen { false }

    testLogging {
        events "started", "passed", "skipped", "failed"
        // show standard out and standard error of the test JVM(s) on the console
        showStandardStreams = true
        // show full exception trace
        exceptionFormat = 'full'
        showStackTraces = true
        showCauses = true
        showExceptions = true
    }

    // attach debugger
    if (System.getProperty('debug', 'false') == 'true') {
        jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=n,address=192.168.29.248:9009,suspend=y'
    }
    println "Using LOG_DIR: ${project.logDir}"
    reports {
        html.required.set(true)
        junitXml.required.set(true)
        html.outputLocation.set(file("$project.logDir/unit-test-results"))
        junitXml.outputLocation.set(file("$project.logDir/unit-test-results"))
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['--release', '17']
}

tasks.withType(JavaExec).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

shadowJar.finalizedBy sourcesJar
