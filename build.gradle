import java.text.SimpleDateFormat

buildscript {
    ext {
        gradleVersion = '7.3.3'
        assertJVersion = '3.24.2'
        atdVersion = 'dbef9bed7d'
        applitoolsSeleniumVersion = '3.213.0'
        applitoolsAppiumVersion = '3.213.0'
        commonsLang3Version = '3.12.0'
        unirestVersion = '3.14.1'
        jadbVersion = '1.2.1'
        webDriverManagerVersion = '5.3.2'
        googleCodeJsonSimpleVersion = '1.1.1'
        junitVersion = '5.9.2'
        slf4jVersion = '2.0.6'
        reportportalAgentCucumberVersion = '5.0.6'
        reportportalAgentTestNGVersion = '5.0.11'
        fasterxmlJacksonVersion = '2.14.1'
        jsonPathVersion = '2.7.0'
        everitSchemaValidatorVersion = '1.5.1'
        jodaTimeVersion = '2.12.2'
        masterThoughtVersion = '5.7.4'
        browserStackLocalVersion = '1.0.6'
    }
}

plugins {
    id "org.sonarqube" version "3.5.0.2730"
    id "java"
    id "idea"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
}

group = 'com.github.znsio'
version '0.0.70'

repositories {
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

compileJava {
    options.encoding = "UTF-8"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation fileTree(dir: "$project.projectDir/libs", include: ['*.jar'])
    implementation files("$buildDir/classes/main")
    implementation files("$buildDir/classes/test")
    implementation "com.googlecode.json-simple:json-simple:$project.googleCodeJsonSimpleVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$project.fasterxmlJacksonVersion"
    implementation "com.konghq:unirest-java:$project.unirestVersion"
    implementation "org.assertj:assertj-core:$project.assertJVersion"
    implementation "com.github.AppiumTestDistribution:AppiumTestDistribution:$project.atdVersion"
    implementation "org.apache.commons:commons-lang3:$project.commonsLang3Version"
    implementation "io.github.bonigarcia:webdrivermanager:$project.webDriverManagerVersion"
    implementation "com.jayway.jsonpath:json-path:$project.jsonPathVersion"
    implementation "com.github.vidstige:jadb:$project.jadbVersion"
    implementation "org.junit.jupiter:junit-jupiter:$project.junitVersion"
    implementation "com.epam.reportportal:agent-java-cucumber6:$project.reportportalAgentCucumberVersion"
    implementation "org.slf4j:slf4j-api:$project.slf4jVersion"
    implementation "joda-time:joda-time:$project.jodaTimeVersion"
    implementation "com.browserstack:browserstack-local-java:$project.browserStackLocalVersion"
    implementation("com.epam.reportportal:agent-java-testng:$project.reportportalAgentTestNGVersion") {
        exclude group: 'com.fasterxml.jackson.core'
    }
    implementation("com.applitools:eyes-appium-java3:$project.applitoolsAppiumVersion") {
        exclude group: 'java-client'
        exclude group: 'selenium-java'
        exclude group: 'eyes-connectivity-java5-jersey2x'
    }
    implementation("com.applitools:eyes-selenium-java3:$project.applitoolsSeleniumVersion") {
        exclude group: 'java-client'
        exclude group: 'selenium-java'
        exclude group: 'eyes-connectivity-java5-jersey2x'
    }
    implementation "com.applitools:eyes-connectivity-java3-jersey1x:$project.applitoolsSeleniumVersion"
    implementation "org.everit.json:org.everit.json.schema:$project.everitSchemaValidatorVersion"
    implementation "net.masterthought:cucumber-reporting:$masterThoughtVersion"
}

shadowJar {
    archiveBaseName.set("$project.name")
    archiveClassifier.set('')
    archiveVersion.set("$project.version")
    zip64 true
    manifest {
        attributes "Main-Class": "com.znsio.e2e.runner.Runner"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives shadowJar
}

wrapper {
    gradleVersion = project.gradleVersion // version from gradle.properties
}

publishing {
    publications {
        testing(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

task install(dependsOn: publishToMavenLocal)

static def getCurrentDatestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("MM-dd-yyyy")
    return df.format(today)
}

static def getCurrentTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("HH-mm-ss")
    return df.format(today)
}

task run(type: JavaExec) {
    doFirst {
        def logDirectory = "target/" + getCurrentDatestamp() + "/" + getCurrentTimestamp()
        println "Using LOG_DIR: $logDirectory"
        System.setProperty "LOG_DIR", "$logDirectory"

        def configFile = System.getenv("CONFIG")
        if(null == configFile || !file(configFile).exists()) {
            println("CONFIG file not provided, or does not exist")
            println("Run the test by providing the CONFIG file not provided, or does not exist")
            assert file(configFile).exists()
        }

//      You can also specify which config file to use based on the value of RUN_IN_CI as shown below
//
//        def isRunInCI = Boolean.parseBoolean(System.getenv("RUN_IN_CI"))
//        println "isRunningInCI: $isRunInCI"
//        def configFile = isRunInCI
//                ? "./configs/theapp_pcloudy_config.properties"
//                : "./configs/theapp_local_config.properties"
//        configFile = System.getenv("CONFIG") ? System.getenv("CONFIG") : configFile

        systemProperties = System.properties
        def runnerArgs = [
                "${configFile}",
                "com/znsio/sample/e2e/steps",
                "./src/test/resources/com/znsio/sample/e2e/features"
        ]
        args = runnerArgs
    }
    mainClass = "com.znsio.e2e.runner.Runner"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
}
